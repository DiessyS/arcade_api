// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;

import 'models/event.dart';
import 'models/event_multi_marker.dart';
import 'models/marker.dart';
import 'models/teste.dart';
import 'models/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 7697675042053646321),
      name: 'Event',
      lastPropertyId: const obx_int.IdUid(7, 842648696052606232),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 83945569704173195),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5196763668511089513),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7148283959523413703),
            name: 'na2me',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 266882696538324555),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4919128364651106689),
            name: 'eventType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2032847534188824800),
            name: 'markerId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 4991144915407955678),
            relationTarget: 'Marker'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 842648696052606232),
            name: 'createdById',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 2137179759738993058),
            relationTarget: 'User')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 7497615730856175944),
      name: 'EventMultiMarker',
      lastPropertyId: const obx_int.IdUid(5, 8070093292411012942),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2420320479281845968),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6571940301061211480),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 993218906369817269),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 35436463125090714),
            name: 'eventType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8070093292411012942),
            name: 'createdById',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 2042892050448478359),
            relationTarget: 'User')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 5915493698305242877),
            name: 'markers',
            targetId: const obx_int.IdUid(3, 7343636956707892605))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 7343636956707892605),
      name: 'Marker',
      lastPropertyId: const obx_int.IdUid(4, 9183665156354868884),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5160798096413292556),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8736852220989808913),
            name: 'latitude',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4763010965487039086),
            name: 'longitude',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 9183665156354868884),
            name: 'altitude',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 7202801162197773216),
      name: 'Teste',
      lastPropertyId: const obx_int.IdUid(4, 2427939106238268053),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8671123018950221568),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6690835599375000782),
            name: 'latitude',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6324549235083046754),
            name: 'longitude',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2427939106238268053),
            name: 'altitude',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 5101694731649721369),
      name: 'User',
      lastPropertyId: const obx_int.IdUid(7, 2672268482579980057),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2873559126810583380),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7631488255996569401),
            name: 'identifier',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(4, 2646134879686239601)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6562660316890533853),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4195957475898934943),
            name: 'banned',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 224551680100278764),
            name: 'manager',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6462495771890028528),
            name: 'crudOnTempEvents',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2672268482579980057),
            name: 'crudOnPermEvents',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
obx.Store openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) {
  return obx.Store(getObjectBoxModel(),
      directory: directory,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(5, 5101694731649721369),
      lastIndexId: const obx_int.IdUid(4, 2646134879686239601),
      lastRelationId: const obx_int.IdUid(1, 5915493698305242877),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Event: obx_int.EntityDefinition<Event>(
        model: _entities[0],
        toOneRelations: (Event object) => [object.marker, object.createdBy],
        toManyRelations: (Event object) => {},
        getId: (Event object) => object.id,
        setId: (Event object, int id) {
          object.id = id;
        },
        objectToFB: (Event object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final na2meOffset = fbb.writeString(object.na2me);
          final descriptionOffset = fbb.writeString(object.description);
          final eventTypeOffset = fbb.writeString(object.eventType);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, na2meOffset);
          fbb.addOffset(3, descriptionOffset);
          fbb.addOffset(4, eventTypeOffset);
          fbb.addInt64(5, object.marker.targetId);
          fbb.addInt64(6, object.createdBy.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Event()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..na2me = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..eventType = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '');
          object.marker.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.marker.attach(store);
          object.createdBy.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.createdBy.attach(store);
          return object;
        }),
    EventMultiMarker: obx_int.EntityDefinition<EventMultiMarker>(
        model: _entities[1],
        toOneRelations: (EventMultiMarker object) => [object.createdBy],
        toManyRelations: (EventMultiMarker object) => {
              obx_int.RelInfo<EventMultiMarker>.toMany(1, object.id):
                  object.markers
            },
        getId: (EventMultiMarker object) => object.id,
        setId: (EventMultiMarker object, int id) {
          object.id = id;
        },
        objectToFB: (EventMultiMarker object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final eventTypeOffset = fbb.writeString(object.eventType);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, eventTypeOffset);
          fbb.addInt64(4, object.createdBy.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = EventMultiMarker()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..eventType = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '');
          object.createdBy.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.createdBy.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<EventMultiMarker>(
              object.markers,
              store,
              obx_int.RelInfo<EventMultiMarker>.toMany(1, object.id));
          return object;
        }),
    Marker: obx_int.EntityDefinition<Marker>(
        model: _entities[2],
        toOneRelations: (Marker object) => [],
        toManyRelations: (Marker object) => {},
        getId: (Marker object) => object.id,
        setId: (Marker object, int id) {
          object.id = id;
        },
        objectToFB: (Marker object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.latitude);
          fbb.addFloat64(2, object.longitude);
          fbb.addFloat64(3, object.altitude);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Marker()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..latitude =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0)
            ..longitude =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..altitude =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);

          return object;
        }),
    Teste: obx_int.EntityDefinition<Teste>(
        model: _entities[3],
        toOneRelations: (Teste object) => [],
        toManyRelations: (Teste object) => {},
        getId: (Teste object) => object.id,
        setId: (Teste object, int id) {
          object.id = id;
        },
        objectToFB: (Teste object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.latitude);
          fbb.addFloat64(2, object.longitude);
          fbb.addFloat64(3, object.altitude);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Teste()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..latitude =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0)
            ..longitude =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..altitude =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);

          return object;
        }),
    User: obx_int.EntityDefinition<User>(
        model: _entities[4],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final identifierOffset = fbb.writeString(object.identifier);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, identifierOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addBool(3, object.banned);
          fbb.addBool(4, object.manager);
          fbb.addBool(5, object.crudOnTempEvents);
          fbb.addBool(6, object.crudOnPermEvents);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..identifier = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..banned =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false)
            ..manager =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false)
            ..crudOnTempEvents =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false)
            ..crudOnPermEvents =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Event] entity fields to define ObjectBox queries.
class Event_ {
  /// see [Event.id]
  static final id = obx.QueryIntegerProperty<Event>(_entities[0].properties[0]);

  /// see [Event.name]
  static final name =
      obx.QueryStringProperty<Event>(_entities[0].properties[1]);

  /// see [Event.na2me]
  static final na2me =
      obx.QueryStringProperty<Event>(_entities[0].properties[2]);

  /// see [Event.description]
  static final description =
      obx.QueryStringProperty<Event>(_entities[0].properties[3]);

  /// see [Event.eventType]
  static final eventType =
      obx.QueryStringProperty<Event>(_entities[0].properties[4]);

  /// see [Event.marker]
  static final marker =
      obx.QueryRelationToOne<Event, Marker>(_entities[0].properties[5]);

  /// see [Event.createdBy]
  static final createdBy =
      obx.QueryRelationToOne<Event, User>(_entities[0].properties[6]);
}

/// [EventMultiMarker] entity fields to define ObjectBox queries.
class EventMultiMarker_ {
  /// see [EventMultiMarker.id]
  static final id =
      obx.QueryIntegerProperty<EventMultiMarker>(_entities[1].properties[0]);

  /// see [EventMultiMarker.name]
  static final name =
      obx.QueryStringProperty<EventMultiMarker>(_entities[1].properties[1]);

  /// see [EventMultiMarker.description]
  static final description =
      obx.QueryStringProperty<EventMultiMarker>(_entities[1].properties[2]);

  /// see [EventMultiMarker.eventType]
  static final eventType =
      obx.QueryStringProperty<EventMultiMarker>(_entities[1].properties[3]);

  /// see [EventMultiMarker.createdBy]
  static final createdBy = obx.QueryRelationToOne<EventMultiMarker, User>(
      _entities[1].properties[4]);

  /// see [EventMultiMarker.markers]
  static final markers = obx.QueryRelationToMany<EventMultiMarker, Marker>(
      _entities[1].relations[0]);
}

/// [Marker] entity fields to define ObjectBox queries.
class Marker_ {
  /// see [Marker.id]
  static final id =
      obx.QueryIntegerProperty<Marker>(_entities[2].properties[0]);

  /// see [Marker.latitude]
  static final latitude =
      obx.QueryDoubleProperty<Marker>(_entities[2].properties[1]);

  /// see [Marker.longitude]
  static final longitude =
      obx.QueryDoubleProperty<Marker>(_entities[2].properties[2]);

  /// see [Marker.altitude]
  static final altitude =
      obx.QueryDoubleProperty<Marker>(_entities[2].properties[3]);
}

/// [Teste] entity fields to define ObjectBox queries.
class Teste_ {
  /// see [Teste.id]
  static final id = obx.QueryIntegerProperty<Teste>(_entities[3].properties[0]);

  /// see [Teste.latitude]
  static final latitude =
      obx.QueryDoubleProperty<Teste>(_entities[3].properties[1]);

  /// see [Teste.longitude]
  static final longitude =
      obx.QueryDoubleProperty<Teste>(_entities[3].properties[2]);

  /// see [Teste.altitude]
  static final altitude =
      obx.QueryDoubleProperty<Teste>(_entities[3].properties[3]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = obx.QueryIntegerProperty<User>(_entities[4].properties[0]);

  /// see [User.identifier]
  static final identifier =
      obx.QueryStringProperty<User>(_entities[4].properties[1]);

  /// see [User.name]
  static final name = obx.QueryStringProperty<User>(_entities[4].properties[2]);

  /// see [User.banned]
  static final banned =
      obx.QueryBooleanProperty<User>(_entities[4].properties[3]);

  /// see [User.manager]
  static final manager =
      obx.QueryBooleanProperty<User>(_entities[4].properties[4]);

  /// see [User.crudOnTempEvents]
  static final crudOnTempEvents =
      obx.QueryBooleanProperty<User>(_entities[4].properties[5]);

  /// see [User.crudOnPermEvents]
  static final crudOnPermEvents =
      obx.QueryBooleanProperty<User>(_entities[4].properties[6]);
}
